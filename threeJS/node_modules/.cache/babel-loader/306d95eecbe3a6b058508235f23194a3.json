{"ast":null,"code":"// Import dependencies\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nexport default function ThreeEntryPoint(sceneRef) {\n  // Create Scene\n  const scene = new THREE.Scene();\n  scene.background = new THREE.Color(0x282c34); // Define a camera, set it to fill the browser window and position it\n\n  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);\n  camera.position.z = 5; // Define a renderer, and set it to fill the browser window\n\n  const renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight); // Get an element from the DOM and append renderer.domElement to it\n\n  sceneRef.appendChild(renderer.domElement); // Add controls, targetting the same DOM element\n\n  let controls = new OrbitControls(camera, sceneRef);\n  controls.target.set(0, 0, 0);\n  controls.rotateSpeed = 0.5;\n  controls.update(); // Define (or import) your object's geometry\n\n  const geometry = new THREE.TorusKnotGeometry(10, 1.3, 500, 6, 6, 20); // Define your object's material\n\n  const material = new THREE.MeshStandardMaterial({\n    color: 0xfcc742,\n    emissive: 0x111111,\n    specular: 0xffffff,\n    metalness: 1,\n    roughness: 0.55\n  }); // Create the mesh, scale it and add it to the scene\n\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.scale.x = 0.1;\n  mesh.scale.y = 0.1;\n  mesh.scale.z = 0.1;\n  scene.add(mesh); // Create lights, position them, and add them to the scene\n\n  const frontSpot = new THREE.SpotLight(0xeeeece);\n  const frontSpot2 = new THREE.SpotLight(0xddddce);\n  frontSpot.position.set(1000, 1000, 1000);\n  frontSpot2.position.set(-500, -500, -500);\n  scene.add(frontSpot);\n  scene.add(frontSpot2); // Create an animate function, which will allow you to render your scene and define any movements\n\n  const animate = function () {\n    requestAnimationFrame(animate);\n    mesh.rotation.x += 0.005;\n    mesh.rotation.y += 0.005;\n    mesh.rotation.z += 0.005;\n    renderer.render(scene, camera);\n  }; // Call the animate function\n\n\n  animate();\n}","map":{"version":3,"sources":["/home/aditya/Documents/dump/codes/three-js-sample/src/threejs/ThreeEntryPoint.js"],"names":["THREE","OrbitControls","ThreeEntryPoint","sceneRef","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","setSize","appendChild","domElement","controls","target","set","rotateSpeed","update","geometry","TorusKnotGeometry","material","MeshStandardMaterial","color","emissive","specular","metalness","roughness","mesh","Mesh","scale","x","y","add","frontSpot","SpotLight","frontSpot2","animate","requestAnimationFrame","rotation","render"],"mappings":"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","sourcesContent":["// Import dependencies\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nexport default function ThreeEntryPoint(sceneRef) {\n  // Create Scene\n  const scene = new THREE.Scene();\n  scene.background = new THREE.Color(0x282c34);\n\n  // Define a camera, set it to fill the browser window and position it\n  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);\n  camera.position.z = 5;\n\n  // Define a renderer, and set it to fill the browser window\n  const renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n\n  // Get an element from the DOM and append renderer.domElement to it\n  sceneRef.appendChild(renderer.domElement);\n\n  // Add controls, targetting the same DOM element\n  let controls = new OrbitControls(camera, sceneRef);\n  controls.target.set(0, 0, 0);\n  controls.rotateSpeed = 0.5;\n  controls.update();\n\n  // Define (or import) your object's geometry\n  const geometry = new THREE.TorusKnotGeometry(10, 1.3, 500, 6, 6, 20);\n\n  // Define your object's material\n  const material = new THREE.MeshStandardMaterial({\n    color: 0xfcc742,\n    emissive: 0x111111,\n    specular: 0xffffff,\n    metalness: 1,\n    roughness: 0.55,\n  });\n\n  // Create the mesh, scale it and add it to the scene\n  const mesh = new THREE.Mesh(geometry, material);\n\n  mesh.scale.x = 0.1;\n  mesh.scale.y = 0.1;\n  mesh.scale.z = 0.1;\n\n  scene.add(mesh);\n\n  // Create lights, position them, and add them to the scene\n  const frontSpot = new THREE.SpotLight(0xeeeece);\n  const frontSpot2 = new THREE.SpotLight(0xddddce);\n\n  frontSpot.position.set(1000, 1000, 1000);\n  frontSpot2.position.set(-500, -500, -500);\n\n  scene.add(frontSpot);\n  scene.add(frontSpot2);\n\n  // Create an animate function, which will allow you to render your scene and define any movements\n  const animate = function () {\n    requestAnimationFrame(animate);\n\n    mesh.rotation.x += 0.005;\n    mesh.rotation.y += 0.005;\n    mesh.rotation.z += 0.005;\n\n    renderer.render(scene, camera);\n  };\n\n  // Call the animate function\n  animate();\n\n}"]},"metadata":{},"sourceType":"module"}